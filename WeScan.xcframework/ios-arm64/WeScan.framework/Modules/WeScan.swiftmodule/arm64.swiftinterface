// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name WeScan
import AVFoundation
import CoreImage
import CoreMotion
import Foundation
import Swift
import UIKit
import Vision
@_exported import WeScan
import _Concurrency
public enum AddResult {
  case showAndAutoScan
  case showOnly
  public static func == (a: WeScan.AddResult, b: WeScan.AddResult) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers final public class RectangleFeaturesFunnel {
  @objc @_hasMissingDesignatedInitializers final public class RectangleMatch : ObjectiveC.NSObject {
    @objc override final public var description: Swift.String {
      @objc get
    }
    @objc deinit
  }
  final public func add(_ rectangleFeature: WeScan.Quadrilateral, currentlyDisplayedRectangle currentRectangle: WeScan.Quadrilateral?, completion: (WeScan.AddResult, WeScan.Quadrilateral) -> Swift.Void)
  final public func bestRectangle(withCurrentlyDisplayedRectangle currentRectangle: WeScan.Quadrilateral?) -> WeScan.RectangleFeaturesFunnel.RectangleMatch?
  final public func breakTie(between rect1: WeScan.RectangleFeaturesFunnel.RectangleMatch, rect2: WeScan.RectangleFeaturesFunnel.RectangleMatch, currentRectangle: WeScan.Quadrilateral) -> WeScan.RectangleFeaturesFunnel.RectangleMatch
  final public func updateRectangleMatches()
  final public func resetMatchingScores()
  @objc deinit
}
public struct Quadrilateral : WeScan.Transformable {
  public var topLeft: CoreGraphics.CGPoint
  public var topRight: CoreGraphics.CGPoint
  public var bottomRight: CoreGraphics.CGPoint
  public var bottomLeft: CoreGraphics.CGPoint
  public var descriptionTopLeft: CoreGraphics.CGPoint {
    get
  }
  public var descriptionTopRight: CoreGraphics.CGPoint {
    get
  }
  public var descriptionBottomRight: CoreGraphics.CGPoint {
    get
  }
  public var descriptionBottomLeft: CoreGraphics.CGPoint {
    get
  }
  public var description: Swift.String {
    get
  }
  public func applying(_ transform: CoreGraphics.CGAffineTransform) -> WeScan.Quadrilateral
  public mutating func reorganize()
}
extension WeScan.Quadrilateral {
  public func toCartesian(withHeight height: CoreGraphics.CGFloat) -> WeScan.Quadrilateral
}
extension WeScan.Quadrilateral : Swift.Equatable {
  public static func == (lhs: WeScan.Quadrilateral, rhs: WeScan.Quadrilateral) -> Swift.Bool
}
public protocol Transformable {
  func applying(_ transform: CoreGraphics.CGAffineTransform) -> Self
}
extension WeScan.Transformable {
  public func applyTransforms(_ transforms: [CoreGraphics.CGAffineTransform]) -> Self
}
public enum ImageScannerControllerError : Swift.Error {
  case authorization
  case inputDevice
  case capture
  case ciImageCreation
  public static func == (a: WeScan.ImageScannerControllerError, b: WeScan.ImageScannerControllerError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension WeScan.ImageScannerControllerError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public class CaptureSession {
  public init(autoScanEnabled: Swift.Bool = true, editImageOrientation: ImageIO.CGImagePropertyOrientation = .up)
  @objc deinit
}
extension WeScan.CaptureSession {
  public func setImageOrientation()
}
@available(iOS 11.0, *)
public struct VisionRectangleDetector {
  public static func rectangle(forImage image: CoreImage.CIImage, completion: @escaping ((WeScan.Quadrilateral?) -> Swift.Void))
}
public protocol ImageScannerControllerDelegate : ObjectiveC.NSObjectProtocol {
  func imageScannerController(_ scanner: WeScan.ImageScannerController, didFinishScanningWithResults results: WeScan.ImageScannerResults)
  func imageScannerController(_ scanner: WeScan.ImageScannerController, didFinishScanningWithObject results: WeScan.WeScanImageObject)
  func imageScannerControllerDidCancel(_ scanner: WeScan.ImageScannerController)
  func imageScannerController(_ scanner: WeScan.ImageScannerController, didFailWithError error: Swift.Error)
}
@objc @_Concurrency.MainActor(unsafe) final public class ImageScannerController : UIKit.UINavigationController {
  @_Concurrency.MainActor(unsafe) weak final public var imageScannerDelegate: WeScan.ImageScannerControllerDelegate?
  @objc required dynamic public init()
  @_Concurrency.MainActor(unsafe) required public init(_ object: WeScan.WeScanImageObject)
  @_Concurrency.MainActor(unsafe) required public init(_ image: UIKit.UIImage?)
  @_Concurrency.MainActor(unsafe) required public init(_ object: WeScan.WeScanImageObject, _ image: UIKit.UIImage?)
  @_Concurrency.MainActor(unsafe) required public init(_ object: WeScan.WeScanImageObject, _ image: UIKit.UIImage?, _ quad: WeScan.Quadrilateral?, _ delegate: WeScan.ImageScannerControllerDelegate)
  @_Concurrency.MainActor(unsafe) required public init(_ object: WeScan.WeScanImageObject, _ editionMode: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override final public var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @objc deinit
}
public struct WeScanImageObject {
  public var isScanned: Swift.Bool
  public var imageView: UIKit.UIImageView?
  public var results: WeScan.ImageScannerResults?
  public var quad: WeScan.Quadrilateral?
  public init()
}
public struct ImageScannerResults {
  public var originalImage: UIKit.UIImage
  public var scannedImage: UIKit.UIImage
  public var enhancedImage: UIKit.UIImage?
  public var doesUserPreferEnhancedImage: Swift.Bool
  public var detectedRectangle: WeScan.Quadrilateral
}
extension CoreImage.CIImage {
  public func applyingAdaptiveThreshold() -> UIKit.UIImage?
}
public struct CIRectangleDetector {
  public static var rectangleDetector: CoreImage.CIDetector?
  public static func rectangle(forImage image: CoreImage.CIImage, completion: @escaping ((WeScan.Quadrilateral?) -> Swift.Void))
  public static func rectangle(forImage image: CoreImage.CIImage) -> WeScan.Quadrilateral?
}
extension UIKit.UIImage {
  public func applyingPortraitOrientation() -> UIKit.UIImage
  public func withFixedOrientation() -> UIKit.UIImage
}
